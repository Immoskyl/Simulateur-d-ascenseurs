package ascenseur.affichage;

import ascenseur.traitement.*;
import ascenseur.traitement.strategie.ChoixAleatoire;
import ascenseur.traitement.strategie.ChoixArbitraire;
import ascenseur.traitement.strategie.ChoixOptimal;

import java.util.ArrayList;
import java.util.Scanner;

public class Client {

    public static void main(String[] args) throws Exception {

        // -- INITIALISATION DE LA VUE --

        Scanner sin = new Scanner(System.in);
        sin.useDelimiter("\\n");
        int nbEtages;
        int nbAscenseur;
        Controleur controleur = Controleur.getInstance();

        System.out.println("Choisir nombre d'étages (exemple : 10)");
        nbEtages = sin.nextInt();

        System.out.println("Choisir le nombre d'ascenseurs (exemple : 3)");
        nbAscenseur = sin.nextInt();

        System.out.println("Choisir le comportement des ascenseurs:");
        System.out.println("1: A chaque requête venant d'un étage, un ascenseur au hasard est choisi");
        System.out.println("2: L'ascenseur ayant le moins de requêtes prend en charge la prochaine requête venant d'un étage");
        System.out.println("3: L'ascenseur susceptible d'arriver le plus vite à l'étage de la requête");
        int strategie = sin.nextInt();
        switch (strategie) {
            case 1:
                controleur.setStrategieDeSelection(new ChoixAleatoire());
                break;
            case 2:
                controleur.setStrategieDeSelection(new ChoixArbitraire());
                break;
            case 3:
                controleur.setStrategieDeSelection(new ChoixOptimal());
                break;
            default:
                controleur.setStrategieDeSelection(new ChoixArbitraire());
                System.out.println("Boutton non géré, l'ascenseur ayant le moins de requêtes prendra donc en charge la première requête venant d'un étage");
        }




        for (int i = 0; i < nbAscenseur; ++i) {
            System.out.println("Choisissez les options pour l'ascenseur numero " + i);
            System.out.println("Options : Musique, Rapide, une par ligne, vide pour aucune option");

            FabriqueAscenseur fabrique = new FabriqueAscenseur();
            AscenseurAbstrait ascenseur = fabrique.creerAscenseur();

            while (true){
                String option = sin.next();
                if (option.equals("")) break;
                fabrique.ajouterOptions(option, ascenseur);
            }

            controleur.ajouterAscenseur(ascenseur);
        }



        VueCoupeImmeuble vue = new VueCoupeImmeuble(controleur, nbEtages);
        vue.afficher();
    }
}
